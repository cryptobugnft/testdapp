{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["window","$","short_acct","CONFIG","ABI","account","nftcontract","defSymbol","totalGasLimit","walletBalanceAPI","scannerAPI","balanceAPI","resultAPICall","CONFIGWhitelist","stakingnftcontract","rewardcontract","nitrocontract","stakingnft_address","nitroboost_address","web3","localStorage","getItem","rewardInDetail","vaultSelected","amtNitro","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","show","delay","Promise","resolve","setTimeout","_connectwallet","asyncToGenerator","_regeneratorRuntime","mark","_callee2","configResponse","accounts","networkId","abiResponse","abiWhitelist","sWallBal","wrap","_context2","prev","next","ethereum","fetch","headers","Content-Type","Accept","sent","json","Web3","send","eth","getAccounts","request","method","MAINNET","ID","TESTNET","SYMBOL","GAS_LIMIT","API","BALANCE","WALLET","ABIFetch","TOKENREWARD","MAINDAPP","STAKING","NITROBOOST","toUpperCase","TESTDAPP","onGoingNotif","document","getElementById","style","width","WalletBalance","innerHTML","APICall","listNFTFilter","stakeVaults","setInterval","RewardInquiry","confirm","t0","console","log","stop","apply","arguments","RefreshCollection","_RefreshCollection","_callee3","nftCol","_context3","value","listNFT","_x","_x2","_APICall","_callee4","theURL","apiResponse","jsonParsedContents","_context4","abrupt","APIBalanceCall","_x3","_x4","_x5","_APIBalanceCall","_callee5","_account","_CA","_context5","replace","_x6","_WalletBalance","_callee6","earnedrwd","rewards","_context6","utils","fromWei","result","Number","toFixed","claimVault","_x7","_claimVault","_callee7","_vaultId","_vault","_tkIDs","i","balanceOfOwner","j","_tkID","_context7","methods","Vault","nftAddress","balanceOf","tokenOfOwnerByIndex","nftStake","owner","push","claim","from","refreshDAppView","modifyVault","_x8","_x9","_modifyVault","_callee9","_vaultContract","tab_container","_contractAddress","_vId","_context9","UnstakeMenuControl","length","type","contractAddress","getVaultId","ERC721","ShowNFTCard","_x10","_onGoingNotif","_callee10","msg","btnConnect","img","_context10","substring","createElement","class","setAttribute","appendChild","unstakeVault","_x11","_unstakeVault","_callee11","_context11","unstake","_RewardInquiry","_callee12","_stakeCount","balanceOfVault","_symbol","_i","contractAdress","divPend","_pendingRewards","_pend","earned","objNFTPend","_nitroStakeRemaining","sec_num","hours","minutes","seconds","remainingBurn","DivContainer","children","child","child2","_context12","includes","symbol","pendingRewardByAccount","String","split","concat","pendingReward","fontSize","nitroStakeRemaining","parseInt","Math","floor","getElementsByTagName","id","className","t1","t2","_x12","_x13","_x14","_UnstakeMenuControl","_callee13","btnBack","btnClaim","btnUnstake","_btnBack","_btnClaim","_btnUnstake","_context13","display","classList","add","removeAttribute","remove","_x15","_stakeVaults","_callee15","usrVaultCount","usrCurrVault","_i2","nftName","tokenMetadataURI","tokenMetadata","_context15","active","name","tokenURI","startsWith","then","response","_callee14","cardVault","cardVaultCard","cardVaultFront","imgNFT","vid_source","cardVaultDetails","cardH4","cardSpan","cardVaultBack","cardButtonClaim","cardButtonUnstake","cardButtonModify","_context14","color","onclick","_x16","_x17","_x18","_x19","_listNFT","_callee16","filterList","userNFTHold","btnStakeAll","btnStakeSelected","key","ctr","_i3","_context16","keys","NFT","done","ADDRESS","t3","t4","t5","t6","t7","ShowNFTError","t8","_x20","_x21","_x22","_ABIFetch","_callee17","_abi","_address","_contract","ABIResponse","ABIJSON","_context17","Contract","_x23","_listNFTFilter","_callee18","lstNFT","z_1","t_1","z","t","_context18","createTextNode","balance","fetchNFTImage","_x24","_x25","_x26","_x27","_fetchNFTImage","_callee19","tkID","_caller","_context19","_x28","_x29","_x30","_x31","_x32","_ShowNFTCard","_callee21","isStaked","nftcontainer","btnPowerUp","_loop","_context21","_callee20","nftdetail","chk","lbl","objNFT","_context20","htmlFor","showPrompt","_UnstakeSelected","_callee22","_context22","ClaimThem","_ClaimSelected","_callee23","_context23","_BackToCollection","_callee24","_context24","_x33","_ClaimThem","_callee25","_DivContainer","elements","tkIDs","nft","_context25","checked","_StakeAll","_callee26","_isNFTAppr","address","_context26","nftApproveAll","isWhitelist","stake","stakeAny","_StakeThem","_callee27","_DivContainer2","_context27","_refreshDAppView","_callee28","_context28","_x34","_nftApproveAll","_callee29","_nftcontract","_context29","isApprovedForAll","setApprovalForAll","_x35","_isWhitelist","_callee30","_res","_context30","_x36","_ShowNFTError","_callee31","msgValue","curDiv","_context31","showCover","_showCover","_callee32","coverDiv","_context32","body","overflowY","append","NitroAdd","_NitroAdd","_callee33","_DivContainer3","_nitroId","_context33","gasLimit","stakeNitro","hideCover","_hideCover","_callee34","_context34","_x37","_x38","_showPrompt","_callee36","text","callback","form","container","_loop2","complete","_context36","onkeydown","_callee35","div","_context35","onsubmit","cancel","e","_NitroMint","_callee37","pID","totalCost","_allow","_maxSupp","_context37","getNFTCost","allowance","totalSupply","toWei","approve","mint","to","BtnSelected","_x40","_BtnSelected","_callee38","amt","_context38","react_default","a","fontFamily","fontWeight","href","src","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","onClick","ButtonGroup","size","boxShadow","Button","role","_x39","NitroMint","Tabs","defaultActiveKey","Tab","eventKey","title","onChange","selected","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.0972fd5d.chunk.js","sourcesContent":["import './App.css';\nimport { Button, ButtonGroup, Modal } from 'react-bootstrap';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component, createElement } from 'react';\n\nimport 'sf-font';\n\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3 from 'web3';\n\nimport { useEffect } from \"react\"\nimport { accessListify } from 'ethers/lib/utils';\nimport { First } from 'react-bootstrap/esm/PageItem';\n\nimport NFTStakeABI from './RushNFTStaking.json';\nimport NitroBoostABI from './NitroBoost.json';\n\n\nconst $ = window.$;\n\nvar CONFIG = null;\nvar ABI = null;\nvar account = null;\nvar nftcontract = null;\n\nvar defSymbol = null;\nvar totalGasLimit = null;\n\nvar walletBalanceAPI = null;\nvar scannerAPI = null;\nvar balanceAPI = null;\nvar resultAPICall = null;\nvar CONFIGWhitelist = null;\n\nvar nftName = null;\n\nvar stakingnftcontract = null;\nvar rewardcontract = null;\nvar nitrocontract = null;\n\nvar stakingnft_address = null;\nvar nitroboost_address = null;\n\nvar acc = localStorage.getItem(\"account\");\nvar short_acct;\n\nvar web3 = null;\nvar contract = null;\n\nvar rewardInDetail = false;\nvar vaultSelected = null;\n\nvar amtNitro = 0;\n\n/* var refresh_screen;\n$(function () {\n  refresh_screen = function (_text) {\n    $(\".loader\").fadeOut(1000);\n    $(\".content\").fadeIn(1000);\n  }\n}); */\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {};\n\n  }\n\n  handleModal() {\n    this.setState({ show: !this.state.show })\n  }\n\n  async componentDidMount() {\n\n  }\n\n\n  render() {\n    let nftcost = '';\n\n    const sleep = (milliseconds) => {\n      return new Promise(resolve => setTimeout(resolve, milliseconds))\n    }\n\n\n    function delay() {\n      return new Promise(resolve => setTimeout(resolve, 300));\n    }\n\n    async function connectwallet() {\n      try {\n        if (window.ethereum) {\n\n          const configResponse = await fetch(\"/config/config.json\", {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n            },\n          });\n          CONFIG = await configResponse.json();\n\n          web3 = new Web3(window.ethereum);\n\n\n          await window.ethereum.send('eth_requestAccounts');\n          var accounts = await web3.eth.getAccounts();\n          account = accounts[0];\n\n          const networkId = await window.ethereum.request({\n            method: \"net_version\",\n          });\n\n          if ((networkId == CONFIG.MAINNET.ID) || (networkId == CONFIG.TESTNET.ID)) {\n\n            const abiResponse = await fetch(\"/config/abi.json\", {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n              },\n            });\n            ABI = await abiResponse.json();\n\n            var abiWhitelist = null;\n\n            if (networkId == CONFIG.MAINNET.ID) {\n              defSymbol = CONFIG.MAINNET.SYMBOL;\n              totalGasLimit = CONFIG.MAINNET.GAS_LIMIT;\n              scannerAPI = CONFIG.MAINNET.API;\n              balanceAPI = CONFIG.MAINNET.BALANCE;\n              walletBalanceAPI = CONFIG.MAINNET.WALLET;\n              rewardcontract = await ABIFetch(web3, ABI.TOKENREWARD.ABI, CONFIG.MAINDAPP.TOKENREWARD);\n              stakingnftcontract = await ABIFetch(web3, ABI.STAKING.ABI, CONFIG.MAINDAPP.STAKING);\n              nitrocontract = await ABIFetch(web3, ABI.NITROBOOST.ABI, CONFIG.MAINDAPP.NITROBOOST);\n\n              stakingnft_address = CONFIG.MAINDAPP.STAKING;\n              nitroboost_address = CONFIG.MAINDAPP.NITROBOOST.toUpperCase();\n\n              abiWhitelist = await fetch(\"/config/whitelisted.json\", {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Accept: \"application/json\",\n                },\n              });\n              CONFIGWhitelist = await abiWhitelist.json();\n\n            }\n            else if (networkId == CONFIG.TESTNET.ID) {\n              //console.log(\"API CALL\");\n\n              defSymbol = CONFIG.TESTNET.SYMBOL;\n              totalGasLimit = CONFIG.TESTNET.GAS_LIMIT;\n              scannerAPI = CONFIG.TESTNET.API;\n              balanceAPI = CONFIG.TESTNET.BALANCE;\n              walletBalanceAPI = CONFIG.TESTNET.WALLET;\n              rewardcontract = await ABIFetch(web3, ABI.TOKENREWARD.ABI, CONFIG.TESTDAPP.TOKENREWARD);\n              stakingnftcontract = await ABIFetch(web3, ABI.STAKING.ABI, CONFIG.TESTDAPP.STAKING);\n              nitrocontract = await ABIFetch(web3, ABI.NITROBOOST.ABI, CONFIG.TESTDAPP.NITROBOOST);\n\n\n              stakingnft_address = CONFIG.TESTDAPP.STAKING;\n              nitroboost_address = CONFIG.TESTDAPP.NITROBOOST;\n\n              abiWhitelist = await fetch(\"/config/testwhitelisted.json\", {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Accept: \"application/json\",\n                },\n              });\n              CONFIGWhitelist = await abiWhitelist.json();\n\n            }\n\n            onGoingNotif(\"\");\n\n            var sWallBal = document.getElementById(\"wallBal\");\n            sWallBal.style.width = \"100px\";\n            sWallBal.innerHTML = await WalletBalance(account);\n\n            resultAPICall = await APICall(account, scannerAPI);\n            await listNFTFilter(resultAPICall);\n            //  await listNFT(account, 'unstaked-nft-container', resultAPICall, \"All\");\n\n            const DivContainer = document.getElementById('staked-nft-container');\n            DivContainer.innerHTML = \"\";\n            await stakeVaults('staked-nft-container');\n\n            var timer;\n            timer = setInterval(function () {\n              RewardInquiry();\n            }, 5000);\n          }\n\n          else {\n            var z = window.confirm(\"Wrong network!\");\n          }\n\n        }\n      }\n      catch (ex) {\n        console.log('connectwallet - SeeError - ' + ex);\n      }\n    }\n\n\n    async function RefreshCollection() {\n      var nftCol = document.getElementById(\"nftFilter\").value;\n      resultAPICall = await APICall(account, scannerAPI);\n      await listNFT(account, 'unstaked-nft-container', resultAPICall, nftCol);\n    }\n\n    async function APICall(account, API) {\n      var theURL = API + \"=\" + account;\n      var apiResponse = await fetch(theURL);\n      var jsonParsedContents = await apiResponse.json();\n\n      return jsonParsedContents;\n    }\n\n    async function APIBalanceCall(_account, _CA, API) {\n      var theURL = API.replace('@CONTRACTADDRESS', _CA).replace('@ACCOUNT', _account);\n      var apiResponse = await fetch(theURL);\n      var jsonParsedContents = await apiResponse.json();\n\n      return jsonParsedContents;\n    }\n\n    async function WalletBalance(_account) {\n      var theURL = walletBalanceAPI.replace('@ACCOUNT', _account);\n      var apiResponse = await fetch(theURL);\n      var jsonParsedContents = await apiResponse.json();\n\n      var earnedrwd = Web3.utils.fromWei(jsonParsedContents.result);\n      var rewards = Number(earnedrwd).toFixed(3);\n\n      return '  ' + rewards + ' ' + defSymbol;\n    }\n\n    async function claimVault(_vaultId) {\n      try {\n        await onGoingNotif(\"Pending...\");\n\n        var _vault = await stakingnftcontract.methods.Vault(_vaultId).call();\n\n        var _tkIDs = [];\n        resultAPICall = await APIBalanceCall(stakingnft_address, _vault.nftAddress, balanceAPI);\n        //console.log(resultAPICall);\n        for (let i = 0; i < resultAPICall.result; i++) {\n\n          var balanceOfOwner = await nftcontract.methods.balanceOf(stakingnft_address).call();\n          //console.log('balanceOfOwner: ' + balanceOfOwner);\n\n          for (let j = 0; j < balanceOfOwner; j++) {\n            var _tkID = await nftcontract.methods.tokenOfOwnerByIndex(stakingnft_address, j).call();\n            var _nftStakeInfo = await stakingnftcontract.methods.nftStake(_vaultId, _tkID).call();\n            if (_nftStakeInfo.owner == account) {\n              _tkIDs.push(_tkID);\n            }\n          }\n        }\n        //console.log(_tkIDs);\n\n        await stakingnftcontract.methods.claim(_vaultId, _tkIDs).send({ from: account });\n        await refreshDAppView();\n\n      }\n      catch (ex) {\n        console.log('claimVault');\n        console.log(ex);\n      }\n      await onGoingNotif(\"\");\n\n    }\n\n    async function backToStake() {\n      await stakeVaults('staked-nft-container');\n    }\n\n    /* async function showUnstakeButtons(tab_container) {\n      console.log(\"showUnstakeButtons\");\n      try {\n        document.getElementById(tab_container).innerHTML = \"\";\n\n        const DivStakedMenu = document.getElementById('staked-menu');\n        DivStakedMenu.innerHTML = \"\";\n\n        const divCol = document.createElement('div');\n        divCol.className = 'col'; \n\n        const btnBack = document.createElement('button');\n        btnBack.type = \"button\";\n        btnBack.className = \"btn btn-secondary\";\n        btnBack.innerHTML = \"Back\";\n        btnBack.onclick = function () { stakeVaults(tab_container); }\n\n        const btnClaim = document.createElement('button');\n        btnClaim.type = \"button\";\n        btnClaim.className = \"btn btn-secondary\";\n        btnClaim.innerHTML = \"Claim Selected\";\n        btnClaim.onclick = function () { ClaimThem(); }\n\n        const btnUnstake = document.createElement('button');\n        btnUnstake.type = \"button\";\n        btnUnstake.className = \"btn btn-secondary\";\n        btnUnstake.innerHTML = \"Unstake Selected\";\n        btnUnstake.onclick = function () { ClaimThem(true); }\n\n        DivStakedMenu.appendChild(btnBack);\n        DivStakedMenu.appendChild(btnClaim);\n        DivStakedMenu.appendChild(btnUnstake);\n\n      }\n      catch (ex) {\n        console.log(\"ERROR ON - showUnstakeButtons\");\n        console.log(ex);\n      }\n\n    } */\n\n    async function modifyVault(_vaultId, _vaultContract) {\n      try {\n        await UnstakeMenuControl(true, true, true);\n\n        //console.log('_vaultId: ', _vaultId, '_vaultContract: ', _vaultContract);\n\n        var tab_container = \"staked-nft-container\";\n        document.getElementById('staked-nft-container').innerHTML = \"\";\n\n        var _account = stakingnft_address;\n        resultAPICall = await APICall(_account, scannerAPI);\n\n        rewardInDetail = true;\n\n        for (let i = 0; i < resultAPICall.result.length; i++) {\n          if (resultAPICall.result[i].type == \"ERC-721\") {\n            var _contractAddress = resultAPICall.result[i].contractAddress;\n            vaultSelected = _contractAddress;\n            var _vId = await stakingnftcontract.methods.getVaultId(_contractAddress).call();\n            if ((_vaultId == _vId) && (_vaultContract == _contractAddress)) {\n              nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, _contractAddress);\n              //console.log(\"Load Inside Vault\", nftcontract);\n              //await myStakedNFT(tab_container, nftcontract, _contractAddress, _account)\n              await ShowNFTCard(tab_container, nftcontract, _contractAddress, _account, true);\n              break;\n            }\n          }\n        }\n      }\n      catch (ex) {\n        console.log(ex);\n      }\n\n\n    }\n\n\n\n    /* \n  async function myStakedNFT(tab_container, nftcontract, _contractAddress, _account) {\n    var nftName;\n    try {\n\n      nftName = await nftcontract.methods.name().call();\n\n      const DivContainer = document.getElementById(tab_container);\n      var balanceOfOwner = await nftcontract.methods.balanceOf(_account).call();\n      var _vaultId = await stakingnftcontract.methods.getVaultId(_contractAddress).call();\n      var _vault = await stakingnftcontract.methods.Vault(_vaultId).call();\n\n      rewardcontract = await ABIFetch(web3, ABI.TOKENREWARD.ABI, _vault.tokenReward);\n      var _rewardSymbol = await rewardcontract.methods.symbol().call();\n\n      var curDiv;\n \n      for (let i = 0; i < balanceOfOwner; i++) {\n        (async function () {\n\n          var tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, i).call();\n          //console.log(\"Check Vault and Token ID - \", _vaultId, tkID);\n\n          var _nftStake = await stakingnftcontract.methods.nftStake(_vaultId, tkID).call();\n          //console.log(\"Data Staked - \", _nftStake.owner, account);\n\n          if (_nftStake.owner == account) {\n\n            const tokenMetadata = await fetchNFTImage(nftcontract, _account, tkID, 'myHoldNFT');\n\n            curDiv = document.createElement('div');\n\n            if (nftName == \"Jeepney Rush\") {\n              curDiv.className = \"nftcontainer mt-3 stakegoldeffect\";\n            }\n            else {\n              curDiv.className = \"nftcontainer mt-3\";\n            }\n\n            const chk = document.createElement(\"INPUT\");\n            chk.setAttribute(\"type\", \"checkbox\");\n            chk.id = _contractAddress + \"_\" + tkID;\n            chk.class = \"unlisted\";\n\n            const lbl = document.createElement(\"LABEL\");\n            lbl.htmlFor = chk.id;\n\n            const imgNFT = document.createElement('img');\n\n            if (tokenMetadata[\"image\"].startsWith(\"ipfs://\")) {\n              var _img = `https://ipfs.io/ipfs/${tokenMetadata[\"image\"].split(\"ipfs://\")[1]}`;\n              imgNFT.setAttribute(\"src\", _img);\n            }\n            else {\n              imgNFT.setAttribute(\"src\", tokenMetadata[\"image\"]);\n            }\n\n            imgNFT.setAttribute(\"alt\", _contractAddress);\n            imgNFT.style.width = \"150px\";\n\n            const div = document.createElement('div');\n            div.className = \"nftdetail\";\n\n            const objNFT = document.createElement('h6');\n            objNFT.className = \"h6nftName\";\n            objNFT.innerHTML = (nftName.length > 20 ? nftName.substring(1, 20) : nftName) + ` #` + (tkID.length > 5 ? tkID.substring(1, 5) : tkID);\n\n            const objNFTPend = document.createElement('h6');\n            objNFTPend.className = \"h6pendingEarn\";\n            objNFTPend.id = \"pend\" + _vaultId + tkID;\n            objNFTPend.innerHTML = \"\";  //_pend + _rewardSymbol;\n\n            const btnPowerUp = document.createElement('button');\n            btnPowerUp.type = \"button\";\n            btnPowerUp.className = \"powerUpButton\";\n            btnPowerUp.style = \"{{ fontFamily: 'SF Pro Display' }}\";\n            btnPowerUp.innerHTML = \"+\";\n\n            btnPowerUp.onclick = function () {\n              showPrompt(_vaultId + \"|\" + tkID, function (value) {\n                //alert(\"You entered: \" + value);\n              });\n            };\n\n            lbl.appendChild(imgNFT)\n\n            curDiv.appendChild(chk);\n            curDiv.appendChild(lbl);\n            curDiv.appendChild(btnPowerUp);\n\n            curDiv.appendChild(div);\n            div.appendChild(objNFT)\n            div.appendChild(objNFTPend);\n\n\n\n\n            DivContainer.appendChild(curDiv);\n\n          }\n\n\n\n\n        })();\n      }\n\n      return balanceOfOwner;\n    }\n    catch (ex) {\n      console.log('Error on myHoldNFT');\n      console.log(ex);\n    }\n  } */\n\n    async function onGoingNotif(msg) {\n      //console.log(\"onGoingNotif: \" + msg);\n      var btnConnect = document.getElementById('btnConnect');\n      //var pendNotif = document.getElementById('pendNotif');\n\n      if (msg == \"\") {\n        short_acct = account.substring(0, 6) + \"....\" + account.substring(account.length - 4, account.length);\n        var img = document.createElement('img');\n        img.class = \"ml-3\";\n        img.setAttribute(\"src\", 'chef.svg');\n        btnConnect.class = \"ml-3\";\n        btnConnect.innerHTML = short_acct;\n        btnConnect.appendChild(img);\n      }\n      else {\n        btnConnect.innerHTML = \"\";\n        btnConnect.innerHTML = msg;\n      }\n\n    }\n\n\n\n    async function unstakeVault(_vaultId) {\n      try {\n        await onGoingNotif(\"Pending...\");\n\n        var _vault = await stakingnftcontract.methods.Vault(_vaultId).call();\n\n        //console.log(_vault.vaultName);\n\n        var _tkIDs = [];\n        resultAPICall = await APIBalanceCall(stakingnft_address, _vault.nftAddress, balanceAPI);\n        nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, _vault.nftAddress);\n\n        /* console.log(\"Balance API: \");\n        console.log(resultAPICall); */\n        for (let i = 0; i < resultAPICall.result; i++) {\n\n          var _tkID = await nftcontract.methods.tokenOfOwnerByIndex(stakingnft_address, i).call();\n          var _nftStakeInfo = await stakingnftcontract.methods.nftStake(_vaultId, _tkID).call();\n          if (_nftStakeInfo.owner == account) {\n            _tkIDs.push(_tkID);\n          }\n        }\n        //console.log(_tkIDs);\n\n        await stakingnftcontract.methods.unstake(_vaultId, _tkIDs).send({ from: account });\n        await refreshDAppView();\n\n      }\n      catch (ex) {\n        console.log('unstakeVault');\n        console.log(ex);\n      }\n      await onGoingNotif(\"\");\n\n    }\n\n    async function RewardInquiry() {\n      try {\n        var btnConnect = document.getElementById('btnConnect');\n        if (!btnConnect.innerHTML.includes(short_acct)){\n          return;\n        }\n\n        var sWallBal = document.getElementById(\"wallBal\");\n        sWallBal.innerHTML = await WalletBalance(account);\n\n        var _stakeCount = 0;\n        var _account = stakingnft_address;\n        resultAPICall = await APICall(_account, scannerAPI);\n\n        /* console.log(\"RewardInquiry\");\n        console.log(rewardInDetail); */\n\n        var balanceOfVault = 0;  //await nftcontract.methods.balanceOf(_account).call();\n        var _symbol = await rewardcontract.methods.symbol().call();\n        if (rewardInDetail == false) {\n\n          for (let i = 0; i < resultAPICall.result.length; i++) {\n            if (resultAPICall.result[i].type == \"ERC-721\" && nitroboost_address.toUpperCase() != resultAPICall.result[i].contractAddress.toUpperCase()) {\n              var contractAdress = resultAPICall.result[i].contractAddress;\n              var _vaultId = await stakingnftcontract.methods.getVaultId(contractAdress).call();\n\n              var divPend = document.getElementById(\"Pending\" + resultAPICall.result[i].contractAddress);\n\n              var _pendingRewards = 0;\n\n              if (divPend != null) {\n                nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, resultAPICall.result[i].contractAddress);\n                balanceOfVault = await nftcontract.methods.balanceOf(_account).call();\n\n                var _pend = await stakingnftcontract.methods.pendingRewardByAccount(_vaultId, account).call();\n                var earned = String(_pend).split(\",\")[0];\n                var earnedrwd = Web3.utils.fromWei(earned);\n                _pendingRewards = Number(earnedrwd).toFixed(4);\n                _stakeCount = 0;\n\n                /* var nft_name = await nftcontract.methods.name().call()\n                console.log(nft_name + \" - \" + balanceOfVault); */\n\n                for (var j = 0; j < balanceOfVault; j++) {\n                  var _tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, j).call();\n                  var _nftStakeInfo = await stakingnftcontract.methods.nftStake(_vaultId, _tkID).call();\n\n                  if (_nftStakeInfo.owner == account) {\n                    _stakeCount++;\n                  }\n                }\n\n                divPend.innerHTML = `Total NFT: ${_stakeCount} | Pending: ${_pendingRewards} ${_symbol}`;\n              }\n            }\n          }\n        }\n        else if (rewardInDetail == true) {\n          try {\n            nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, vaultSelected);\n            var _vaultId = await stakingnftcontract.methods.getVaultId(vaultSelected).call();\n            balanceOfVault = await nftcontract.methods.balanceOf(_account).call();\n            _pendingRewards = 0;\n            _stakeCount = 0;\n\n            for (var j = 0; j < balanceOfVault; j++) {\n              var _tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, j).call();\n              var _nftStakeInfo = await stakingnftcontract.methods.nftStake(_vaultId, _tkID).call();\n \n              if (_nftStakeInfo.owner == account) {\n                _stakeCount++;\n\n                var _pend = await stakingnftcontract.methods.pendingReward(_vaultId, _tkID).call();\n                var earned = String(_pend).split(\",\")[0];\n                var earnedrwd = Web3.utils.fromWei(earned);\n                var rewards = Number(earnedrwd).toFixed(4);\n                _pendingRewards = Number(rewards).toFixed(4);\n\n                const objNFTPend = document.getElementById(\"pend\" + _vaultId + _tkID);\n                objNFTPend.style.fontSize = \"small\";\n                objNFTPend.innerHTML = _pendingRewards + \" \" + _symbol;\n\n              }\n\n              \n              var _nitroStakeRemaining;\n              try {\n                _nitroStakeRemaining = await stakingnftcontract.methods.nitroStakeRemaining(_vaultId, _tkID).call(); \n                if (_nitroStakeRemaining > 0) {\n                  var inSec = (_nitroStakeRemaining / 86400) * 24 * 60 * 60;\n\n                  var sec_num = parseInt(inSec, 10); // don't forget the second param\n                  var hours = Math.floor(sec_num / 3600);\n                  var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n                  var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n                  if (hours < 10) { hours = \"0\" + hours; }\n                  if (minutes < 10) { minutes = \"0\" + minutes; }\n                  if (seconds < 10) { seconds = \"0\" + seconds; }\n                  var remainingBurn = hours + ':' + minutes + ':' + seconds;\n \n                  const DivContainer = document.getElementById('staked-nft-container'); \n                  var children = DivContainer.getElementsByTagName('*');\n                  var child, child2;\n                  for (var i = 0; i < children.length; i++) {\n                    child = children[i];\n                    if (child.id == \"pend\" + _vaultId + _tkID){\n                      child.innerHTML = child.innerHTML + '<br>' + remainingBurn + ' left';\n\n                      for (var j = 0; j < children.length; j++){\n                        child2 = children[j]; \n                        if (child2.id == \"nftcontainer_\" + _vaultId + \"_\" + _tkID){\n                          child2.className  = \"nftcontainer NitroEffect\";\n                          break;\n                        }\n                      }  \n                      break;\n                    } \n                  } \n                }\n              }\n              catch (nitro_ex) {\n                console.log(\"no nitro equip\", _nitroStakeRemaining, nitro_ex);\n              }\n            }\n          }\n          catch (ex1) {\n            console.log(\"Error in RewardInquiry - Detailed: \");\n            //console.log(ex1);\n          }\n\n\n        }\n      }\n      catch (ex) {\n        console.log(\"Error on RewardInquiry\");\n        console.log(ex);\n      }\n\n\n      return _stakeCount;\n    }\n\n    async function UnstakeMenuControl(btnBack, btnClaim, btnUnstake) {\n      var _btnBack = document.getElementById(\"btnBack\");\n      var _btnClaim = document.getElementById(\"btnClaimSelected\");\n      var _btnUnstake = document.getElementById(\"btnUnstakeSelected\");\n\n      if ((btnBack == false) && (btnClaim == false) && (btnUnstake == false)) {\n        document.getElementById(\"btnUnstakeMenu\").style.display = \"none\";\n      }\n      else {\n        document.getElementById(\"btnUnstakeMenu\").style.display = \"\";\n      }\n\n      if (btnBack == false) {\n        _btnBack.setAttribute(\"disabled\", \"disabled\");\n        _btnBack.classList.add(\"disabled\");\n      }\n      else {\n        _btnBack.removeAttribute('disabled');\n        _btnBack.classList.remove(\"disabled\");\n      }\n\n      if (btnClaim == false) {\n        _btnClaim.setAttribute(\"disabled\", \"disabled\");\n        _btnClaim.classList.add(\"disabled\");\n      }\n      else {\n        _btnClaim.removeAttribute('disabled');\n        _btnClaim.classList.remove(\"disabled\");\n      }\n\n      if (btnUnstake == false) {\n        _btnUnstake.setAttribute(\"disabled\", \"disabled\");\n        _btnUnstake.classList.add(\"disabled\");\n      }\n      else {\n        _btnUnstake.removeAttribute('disabled');\n        _btnUnstake.classList.remove(\"disabled\");\n      }\n    }\n\n    async function stakeVaults(tab_container) {\n      await delay();\n\n      var _account = stakingnft_address;\n      resultAPICall = await APICall(_account, scannerAPI);\n\n      await UnstakeMenuControl(false, false, false);\n\n      const DivContainer = document.getElementById(tab_container);\n      DivContainer.innerHTML = \"\";\n\n      //const DivStakedMenu = document.getElementById('staked-menu');\n      //DivStakedMenu.innerHTML = \"\";\n\n      rewardInDetail = false;\n\n      var usrVaultCount = 0;\n      var usrCurrVault = null;\n      var _vaultContract = null;\n\n      //console.log(\"Check Number of Vault Stake of user\");\n      //Check Number of Vault Stake of user\n      for (let i = 0; i < resultAPICall.result.length; i++) {\n        if (resultAPICall.result[i].type == \"ERC-721\" && nitroboost_address.toUpperCase() != resultAPICall.result[i].contractAddress.toUpperCase()) {\n          var contractAdress = resultAPICall.result[i].contractAddress;\n          var _vaultId = await stakingnftcontract.methods.getVaultId(contractAdress).call();\n\n          nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, contractAdress);\n          var balanceOfVault = await nftcontract.methods.balanceOf(_account).call();\n\n          for (var j = 0; j < balanceOfVault; j++) {\n            var _tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, j).call();\n            var _nftStakeInfo = await stakingnftcontract.methods.nftStake(_vaultId, _tkID).call();\n            if (_nftStakeInfo.owner == account) {\n              usrVaultCount++;\n              usrCurrVault = _vaultId;\n              _vaultContract = contractAdress;\n              break;\n            }\n          }\n        }\n\n\n      }\n\n      if (usrVaultCount == 1) {\n        rewardInDetail = true;\n        await modifyVault(usrCurrVault, _vaultContract);\n      }\n      else {\n\n        for (let i = 0; i < resultAPICall.result.length; i++) {\n          if (resultAPICall.result[i].type == \"ERC-721\" && nitroboost_address.toUpperCase() != resultAPICall.result[i].contractAddress.toUpperCase()) {\n\n            var contractAdress = resultAPICall.result[i].contractAddress;\n            var _vaultId = await stakingnftcontract.methods.getVaultId(contractAdress).call();\n            var _vaultInfo = await stakingnftcontract.methods.Vault(_vaultId).call();\n\n            if (_vaultInfo.active) {  //if (_vaultId >= 0) {\n\n\n              nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, contractAdress);\n              var nftName = await nftcontract.methods.name().call();\n              var balanceOfVault = await nftcontract.methods.balanceOf(_account).call();\n              var symbol = await rewardcontract.methods.symbol().call();\n\n              var _tkID = 0;\n\n              //console.log(contractAdress, 'balanceOfVault', balanceOfVault);\n\n              var _stakeCount = 0;\n              for (var j = 0; j < balanceOfVault; j++) {\n                _tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, j).call();\n                //console.log(\"Check Token ID: \" + _tkID);\n\n                var _nftStakeInfo = await stakingnftcontract.methods.nftStake(_vaultId, _tkID).call();\n\n                if (_nftStakeInfo.owner == account) {\n                  _stakeCount++;\n\n                  if (_stakeCount > 0) {\n                    let tokenMetadataURI = await nftcontract.methods.tokenURI(_tkID).call();\n                    if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n                      tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`;\n                    }\n                    else if (tokenMetadataURI.startsWith(\"https://gateway.pinata.cloud/ipfs/\")) {\n                      tokenMetadataURI = tokenMetadataURI.replace(`https://gateway.pinata.cloud/ipfs/`, ``);\n                      tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI}${1}`;\n                    }\n                    var tokenMetadata = await fetch(tokenMetadataURI).then((response) => response.json());\n\n                    (async function () {\n                      const cardVault = document.createElement('div');\n                      cardVault.className = \"vault_container\";\n                      cardVault.id = contractAdress;\n                      cardVault.value = _vaultId;\n\n                      const cardVaultCard = document.createElement('div');\n                      cardVaultCard.className = \"vault_card\";\n\n                      const cardVaultFront = document.createElement('div');\n                      cardVaultFront.className = \"vault_front parent\";\n\n                      var imgNFT\n                      if (tokenMetadata[\"image\"].includes(\"mp4\")) {\n                        imgNFT = document.createElement('video');\n                        //imgNFT.style.width = \"500\";\n\n                        const vid_source = document.createElement(\"source\");\n\n                        if (tokenMetadata[\"image\"].startsWith(\"ipfs://\")) {\n                          vid_source.setAttribute(\"src\", `https://ipfs.io/ipfs/${tokenMetadata[\"image\"].split(\"ipfs://\")[1]}`);\n                        }\n                        else {\n                          vid_source.setAttribute(\"src\", tokenMetadata[\"image\"]);\n                        }\n                        vid_source.setAttribute(\"type\", \"video/mp4\");\n                        imgNFT.appendChild(vid_source);\n                      }\n                      else {\n                        imgNFT = document.createElement('img');\n                        imgNFT.setAttribute(\"src\", tokenMetadata[\"image\"]);\n                      }\n                      imgNFT.setAttribute(\"alt\", contractAdress);\n                      //imgNFT.style.width = \"150px\";\n\n                      const cardVaultDetails = document.createElement('div');\n                      cardVaultDetails.className = \"vault_details\";\n\n                      const cardH4 = document.createElement('h5');\n                      cardH4.style.color = \"white\";\n                      cardH4.innerHTML = nftName + \" Vault\";\n\n                      const cardSpan = document.createElement('span');\n                      cardSpan.className = \"spanX\"\n                      cardSpan.id = \"Pending\" + contractAdress;\n                      cardSpan.style.color = \"white\";\n                      cardSpan.innerHTML = \"\";\n\n                      cardVaultDetails.appendChild(cardH4);\n                      cardVaultDetails.appendChild(cardSpan);\n\n                      cardVaultFront.appendChild(imgNFT);\n                      cardVaultFront.appendChild(cardVaultDetails);\n\n                      const cardVaultBack = document.createElement('div');\n                      cardVaultBack.className = \"vault_back\";\n\n                      //const spaceH6 = document.createElement('h6');\n\n                      const cardButtonClaim = document.createElement('a');\n                      cardButtonClaim.style.color = \"white\";\n                      cardButtonClaim.innerHTML = \"Claim All\";\n                      cardButtonClaim.onclick = function () { claimVault(cardVault.value); }\n\n\n                      const cardButtonUnstake = document.createElement('a');\n                      cardButtonUnstake.style.color = \"white\";\n                      cardButtonUnstake.innerHTML = \"Unstake All\";\n                      cardButtonUnstake.onclick = function () { unstakeVault(cardVault.value); }\n\n                      const cardButtonModify = document.createElement('a');\n                      cardButtonModify.style.color = \"white\";\n                      cardButtonModify.innerHTML = \"Modify\";\n                      cardButtonModify.onclick = function () { modifyVault(cardVault.value, cardVault.id); }\n\n\n                      cardVaultBack.appendChild(cardButtonClaim);\n                      cardVaultBack.appendChild(cardButtonUnstake);\n                      cardVaultBack.appendChild(cardButtonModify);\n\n                      cardVaultCard.appendChild(cardVaultFront);\n                      cardVaultCard.appendChild(cardVaultBack);\n\n                      cardVault.appendChild(cardVaultCard);\n\n                      DivContainer.appendChild(cardVault);\n                    })();\n                  }\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n    }\n\n    async function listNFT(_account, tab_container, jsonParsedContents, filterList) {\n      try {\n        var userNFTHold = 0;\n        var btnStakeAll = document.getElementById(\"btnStakeAll\");\n        var btnStakeSelected = document.getElementById(\"btnStakeSelected\");\n\n        //console.log(btnStakeAll);\n\n        document.getElementById(tab_container).innerHTML = \"\";\n\n        if (filterList == \"All\" || filterList == \"All Owned NFT\") {\n          btnStakeAll.setAttribute('disabled', 'disabled');\n          btnStakeSelected.setAttribute('disabled', 'disabled');\n\n          //Populate List NFT\n\n          if (jsonParsedContents != null) {\n            //console.log(\"Load Whitelisted First\");\n            for (var key in CONFIGWhitelist.NFT) {\n              for (let i = 0; i < jsonParsedContents.result.length; i++) {\n                if (jsonParsedContents.result[i].type == \"ERC-721\") {\n                  if (CONFIGWhitelist.NFT[key].ADDRESS == jsonParsedContents.result[i].contractAddress) {\n                    nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, jsonParsedContents.result[i].contractAddress);\n                    userNFTHold = userNFTHold + (await ShowNFTCard(tab_container, nftcontract, jsonParsedContents.result[i].contractAddress, _account));  //myHoldNFT\n                    //console.log(\"await ABIFetch\");\n                    break;\n                  }\n                }\n              }\n            }\n\n            //All other ERC-721\n            var ctr;\n            for (let i = 0; i < jsonParsedContents.result.length; i++) {\n              if (jsonParsedContents.result[i].type == \"ERC-721\" && nitroboost_address.toUpperCase() != jsonParsedContents.result[i].contractAddress.toUpperCase()) {\n                ctr = 0;\n                for (var key in CONFIGWhitelist.NFT) {\n                  if (CONFIGWhitelist.NFT[key].ADDRESS != jsonParsedContents.result[i].contractAddress) {\n                    ctr++;\n                  }\n                }\n                if (ctr >= CONFIGWhitelist.NFT.length) {\n                  nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, jsonParsedContents.result[i].contractAddress);\n                  userNFTHold = userNFTHold + (await ShowNFTCard(tab_container, nftcontract, jsonParsedContents.result[i].contractAddress, _account));  //myHoldNFT\n                }\n              }\n            }\n          }\n\n        }\n        else {\n          nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, filterList);\n          userNFTHold = userNFTHold + (await ShowNFTCard(tab_container, nftcontract, filterList, _account));  //myHoldNFT\n          btnStakeAll.removeAttribute('disabled');\n          btnStakeSelected.removeAttribute('disabled');\n\n        }\n\n        //console.log(userNFTHold);\n        if (userNFTHold == 0) {\n          ShowNFTError(\"NO NFT SCANNED.\");\n        }\n\n      }\n\n      catch (ex) {\n        console.log('listNFT - SeeError - ' + ex);\n        ShowNFTError(ex);\n      }\n    }\n\n    async function ABIFetch(web3, _abi, _address) {\n      var _contract;\n      var ABIResponse;\n\n      ABIResponse = await fetch(_abi, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const ABIJSON = await ABIResponse.json();\n      _contract = new web3.eth.Contract(ABIJSON, _address);\n\n      return _contract;\n    }\n\n    async function listNFTFilter(jsonParsedContents) {\n      //async function populateMyNFT(jsonParsedContents) {\n      var lstNFT = document.getElementById(\"nftFilter\");\n      lstNFT.innerHTML = \"\";\n\n      for (let i = 0; i < jsonParsedContents.result.length; i++) {\n        if (i == 0) {\n          var z_1 = document.createElement(\"option\");\n          z_1.setAttribute(\"value\", \"All\");\n          var t_1 = document.createTextNode(\"All Owned NFT\");\n\n          z_1.appendChild(t_1);\n          lstNFT.appendChild(z_1);\n        }\n\n        if (jsonParsedContents.result[i].type == \"ERC-721\" && jsonParsedContents.result[i].balance > 0 && nitroboost_address.toUpperCase() != jsonParsedContents.result[i].contractAddress.toUpperCase()) {\n          /* console.log(\"jsonParsedContents.result[i].balance\");\n          console.log(jsonParsedContents.result[i].name);\n          console.log(jsonParsedContents.result[i].contractAddress);\n          console.log(jsonParsedContents.result[i].balance); */\n          var z = document.createElement(\"option\");\n          z.setAttribute(\"value\", jsonParsedContents.result[i].contractAddress);\n\n          var t = document.createTextNode(jsonParsedContents.result[i].name + \": \" + jsonParsedContents.result[i].balance);\n          z.appendChild(t);\n\n          lstNFT.appendChild(z);\n        }\n\n      }\n    }\n\n    async function fetchNFTImage(nftcontract, _account, tkID, _caller) {\n      //console.log('fetchNFTImage');\n      var tokenMetadata = null;\n      try {\n        let tokenMetadataURI = await nftcontract.methods.tokenURI(tkID).call();\n        //console.log(\"tokenMetadataURI: \" + tokenMetadataURI);\n\n        if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n          tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`;\n        }\n        else if (tokenMetadataURI.startsWith(\"https://gateway.pinata.cloud/ipfs/\")) {\n          tokenMetadataURI = tokenMetadataURI.replace(`https://gateway.pinata.cloud/ipfs/`, ``);\n          tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI}${tkID}`;\n        }\n        tokenMetadata = await fetch(tokenMetadataURI).then((response) => response.json());\n        //console.log(\"tokenMetadata: \" + tokenMetadata);\n\n      }\n      catch (ex) {\n        console.log('Caller - ' + _caller);\n        console.log(ex);\n      }\n\n      return tokenMetadata;\n\n    }\n\n    async function ShowNFTCard(tab_container, nftcontract, contractAdress, _account, isStaked) {\n      var nftName = await nftcontract.methods.name().call();\n      var balanceOfOwner = await nftcontract.methods.balanceOf(_account).call();\n      var DivContainer = document.getElementById(tab_container);\n      var nftcontainer;\n      var objNFTPend;\n      var btnPowerUp;\n\n      try {\n        for (let i = 0; i < balanceOfOwner; i++) {\n          (async function () {\n            try {\n              var tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, i).call();\n              const tokenMetadata = await fetchNFTImage(nftcontract, _account, tkID, 'ShowNFTCard');\n              var _vaultId = await stakingnftcontract.methods.getVaultId(contractAdress).call();\n\n              nftcontainer = document.createElement(\"div\");\n              //curDiv.className = \"nftcontainer mt-3 stakegoldeffect\";\n              nftcontainer.id = \"nftcontainer_\" + _vaultId + \"_\" + tkID;\n              nftcontainer.className = \"nftcontainer\";\n\n              const nftdetail = document.createElement('div');\n              nftdetail.id = \"nftdetail_\" + _vaultId + \"_\" + tkID;\n              nftdetail.className = \"nftdetail\";\n\n              const chk = document.createElement(\"INPUT\");\n              chk.setAttribute(\"type\", \"checkbox\");\n              chk.id = contractAdress + \"_\" + tkID;\n              chk.class = \"unlisted\";\n\n              const lbl = document.createElement(\"LABEL\");\n              lbl.className = \"parent\";\n              lbl.htmlFor = chk.id;\n\n              var imgNFT;\n              if (tokenMetadata[\"image\"].includes(\"mp4\")) {\n                imgNFT = document.createElement('video');\n                //imgNFT.style.width = \"500\";\n\n                const vid_source = document.createElement(\"source\");\n                if (tokenMetadata[\"image\"].startsWith(\"ipfs://\")) {\n                  vid_source.setAttribute(\"src\", `https://ipfs.io/ipfs/${tokenMetadata[\"image\"].split(\"ipfs://\")[1]}`);\n                }\n                else {\n                  vid_source.setAttribute(\"src\", tokenMetadata[\"image\"]);\n                }\n\n                vid_source.setAttribute(\"type\", \"video/mp4\");\n                imgNFT.appendChild(vid_source);\n              }\n              else {\n                imgNFT = document.createElement('img');\n                imgNFT.setAttribute(\"src\", tokenMetadata[\"image\"]);\n              }\n              imgNFT.setAttribute(\"alt\", contractAdress);\n              //imgNFT.style.width = \"150px\";\n\n              const objNFT = document.createElement('h6');\n              objNFT.innerHTML = (nftName.length > 20 ? nftName.substring(1, 20) : nftName) + ` #` + (tkID.length > 5 ? tkID.substring(1, 5) : tkID);\n\n              lbl.appendChild(imgNFT);\n              nftcontainer.appendChild(chk);\n              nftcontainer.appendChild(lbl);\n\n              nftcontainer.appendChild(nftdetail);\n              nftdetail.appendChild(objNFT);\n\n              //curDiv.appendChild(objNFT);\n\n              /* Begin - For Staked NFT Only */\n              if (isStaked) {\n\n                objNFT.className = \"h6nftName\";\n\n                objNFTPend = document.createElement('h6');\n                objNFTPend.className = \"h6pendingEarn\";\n                objNFTPend.id = \"pend\" + _vaultId + tkID;\n                objNFTPend.innerHTML = \"\";\n\n                btnPowerUp = document.createElement('button');\n                btnPowerUp.type = \"button\";\n                btnPowerUp.className = \"powerUpButton\";\n                btnPowerUp.style = \"{{ fontFamily: 'SF Pro Display' }}\";\n                btnPowerUp.innerHTML = \"+\";\n\n                btnPowerUp.onclick = function () {\n                  showPrompt(_vaultId + \"|\" + tkID, function (value) {\n                    //alert(\"You entered: \" + value);\n                  });\n                };\n                nftdetail.appendChild(objNFTPend)\n                nftcontainer.appendChild(btnPowerUp)\n              }\n              /* End - For Staked NFT Only */\n\n\n              DivContainer.appendChild(nftcontainer);\n            }\n            catch (ex2) {\n              ShowNFTError(nftName + \" - Error on reading token URI\");\n              console.log('ShowNFTErrorCard', ex2);\n            }\n\n          })();\n        }\n\n        return balanceOfOwner;\n      }\n      catch (ex) {\n        console.log('Error on ShowNFTCard', ex);\n      }\n    }\n\n    /* async function myHoldNFT(tab_container, nftcontract, contractAdress, _account) {\n      var nftName;\n      try {\n\n        nftName = await nftcontract.methods.name().call();\n        //console.log(nftName);\n\n        const DivContainer = document.getElementById(tab_container);\n        var balanceOfOwner = await nftcontract.methods.balanceOf(_account).call();\n        var curDiv;\n\n        for (let i = 0; i < balanceOfOwner; i++) {\n          (async function () {\n            try {\n              var tkID = await nftcontract.methods.tokenOfOwnerByIndex(_account, i).call();\n              const tokenMetadata = await fetchNFTImage(nftcontract, _account, tkID, 'myHoldNFT');\n\n              curDiv = document.createElement('div');\n              curDiv.className = \"nftcontainer mb-2\";\n\n              const chk = document.createElement(\"INPUT\");\n              chk.setAttribute(\"type\", \"checkbox\");\n              chk.id = contractAdress + \"_\" + tkID;\n              chk.class = \"unlisted\";\n\n              const lbl = document.createElement(\"LABEL\");\n              lbl.htmlFor = chk.id;\n\n              var imgNFT\n              if (tokenMetadata[\"image\"].includes(\"mp4\")) {\n                imgNFT = document.createElement('video');\n                imgNFT.style.width = \"500\";\n\n                const vid_source = document.createElement(\"source\");\n                if (tokenMetadata[\"image\"].startsWith(\"ipfs://\")) {\n                  vid_source.setAttribute(\"src\", `https://ipfs.io/ipfs/${tokenMetadata[\"image\"].split(\"ipfs://\")[1]}`);\n                }\n                else {\n                  vid_source.setAttribute(\"src\", tokenMetadata[\"image\"]);\n                }\n\n                vid_source.setAttribute(\"type\", \"video/mp4\");\n                imgNFT.appendChild(vid_source);\n              }\n              else {\n                imgNFT = document.createElement('img');\n                imgNFT.setAttribute(\"src\", tokenMetadata[\"image\"]);\n              }\n              imgNFT.setAttribute(\"alt\", contractAdress);\n              imgNFT.style.width = \"150px\";\n\n              const div = document.createElement('div');\n              div.className = \"nftdetail\";\n\n              const objNFT = document.createElement('h6');\n              objNFT.innerHTML = (nftName.length > 20 ? nftName.substring(1, 20) : nftName) + ` #` + (tkID.length > 5 ? tkID.substring(1, 5) : tkID);\n\n              curDiv.appendChild(chk);\n              curDiv.appendChild(lbl);\n              lbl.appendChild(imgNFT)\n              curDiv.appendChild(objNFT);\n              curDiv.appendChild(div);\n              div.appendChild(objNFT)\n\n              DivContainer.appendChild(curDiv);\n\n            }\n            catch (ex2) {\n              ShowNFTError(nftName + \" - Error on reading token URI\");\n              //console.log(ex2);\n            }\n\n          })();\n        }\n\n        return balanceOfOwner;\n      }\n      catch (ex) {\n        console.log('Error on myHoldNFT');\n        //console.log(ex);\n      }\n    } */\n\n    async function UnstakeSelected() {\n      ClaimThem(true);\n    }\n\n    async function ClaimSelected() {\n      ClaimThem(false);\n    }\n\n    async function BackToCollection() {\n      stakeVaults('staked-nft-container');\n    }\n\n    async function ClaimThem(unstake) {\n      try {\n        await delay();\n        await onGoingNotif(\"Pending...\");\n\n        const DivContainer = document.getElementById('staked-nft-container');\n        var children = DivContainer.getElementsByTagName('*');\n        var elements = [], child;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          if (child.type == \"checkbox\" && child.checked == true) {\n            elements.push(child);\n          }\n        }\n\n        var tkIDs = [];\n        var _vaultId;\n\n        //loop for getting staked vault\n        for (var j = 0; j < elements.length; j++) {\n          var nft = [];\n          nft = elements[j].id.split(\"_\");\n          _vaultId = await stakingnftcontract.methods.getVaultId(nft[0]).call();\n\n          tkIDs.push(nft[1]);\n        }\n\n        //console.log(_vaultId);\n        //console.log(tkIDs);\n\n        if (unstake) {\n          await stakingnftcontract.methods.unstake(_vaultId, tkIDs).send({ from: account });\n          //await PopupShow(\"Unstake successful!\");\n        }\n        else {\n          await stakingnftcontract.methods.claim(_vaultId, tkIDs).send({ from: account });\n          //await PopupShow(\"Claim successful!\");\n        }\n\n      }\n      catch (ex) {\n        console.log(\"ClaimThem - \" + ex);\n      }\n      await onGoingNotif(\"\");\n    }\n    /* \n        async function UnstakeThem() {\n          try { \n            const DivContainer = document.getElementById('staked-nft-container');\n            var children = DivContainer.getElementsByTagName('*');\n            var elements = [], child;\n            for (var i = 0; i < children.length; i++) {\n              child = children[i];\n              if (child.type == \"checkbox\" && child.checked == true) {\n                elements.push(child);\n              }\n            }\n    \n            var tkIDs = [];\n            var _vaultId;\n    \n            //loop for getting staked vault\n            for (var j = 0; j < elements.length; j++) {\n              var nft = [];\n              nft = elements[j].id.split(\"_\");\n              _vaultId = await stakingnftcontract.methods.getVaultId(nft[0]).call(); \n              tkIDs.push(nft[1]);\n            }\n     \n            await stakingnftcontract.methods.unstake(_vaultId, tkIDs).send({ from: account }); \n          }\n          catch (ex) {\n            console.log(\"UnstakeThem - \" + ex);\n          }\n        }\n     */\n    async function StakeAll() {\n      const DivContainer = document.getElementById('unstaked-nft-container');\n      var children = DivContainer.getElementsByTagName('*');\n      var elements = [], child;\n      for (var i = 0; i < children.length; i++) {\n        child = children[i];\n        if (child.type == \"checkbox\") {\n          elements.push(child);\n        }\n      }\n\n      var _isNFTAppr = false;\n      var address;\n      var tkIDs = [];\n\n      var _reject = false;\n\n      for (var i = 0; i < elements.length; i++) {\n        var nft = [];\n        nft = elements[i].id.replace(\"chk\", \"\").split(\"_\");\n\n        if (_isNFTAppr == false) {\n          address = nft[0];\n          await onGoingNotif(\"Approve All\");\n          _isNFTAppr = await nftApproveAll(address);\n\n          if (_isNFTAppr == false) {\n            _reject = true;\n            await onGoingNotif(\"\");\n            return;\n          }\n          await onGoingNotif(\"Pending...\");\n        }\n\n        tkIDs.push(nft[1]);\n      }\n\n      if (await isWhitelist(address)) {\n        var _vaultId = await stakingnftcontract.methods.getVaultId(address).call();\n        await stakingnftcontract.methods.stake(_vaultId, tkIDs).send({ from: account });\n      }\n      else {\n        await stakingnftcontract.methods.stakeAny(address, tkIDs).send({ from: account });\n      }\n      await refreshDAppView();\n      await onGoingNotif(\"\");\n\n\n    }\n\n    async function StakeThem() {\n      try {\n        await onGoingNotif(\"Pending...\");\n\n        const DivContainer = document.getElementById('unstaked-nft-container');\n        var children = DivContainer.getElementsByTagName('*');\n        var elements = [], child;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          if (child.type == \"checkbox\" && child.checked == true) {\n            elements.push(child);\n          }\n        }\n\n        //console.log('StakeThem');\n        //console.log(elements);\n\n        var _isNFTAppr = false;\n        var address;\n        var tkIDs = [];\n\n        var _reject = false;\n\n        for (var i = 0; i < elements.length; i++) {\n          var nft = [];\n          nft = elements[i].id.replace(\"chk\", \"\").split(\"_\");\n\n          //console.log(\"_isNFTAppr - \" + _isNFTAppr);\n          if (_isNFTAppr == false) {\n            address = nft[0];\n            await onGoingNotif(\"Approve All\");\n            _isNFTAppr = await nftApproveAll(address);\n\n            if (_isNFTAppr == false) {\n              _reject = true;\n              await onGoingNotif(\"\");\n              return;\n            }\n            await onGoingNotif(\"Pending...\");\n          }\n\n\n          tkIDs.push(nft[1]);\n          //console.log(tkIDs);\n        }\n\n        if (await isWhitelist(address)) {\n          //console.log(\"stake - isWhitelist\");\n          var _vaultId = await stakingnftcontract.methods.getVaultId(address).call();\n          await stakingnftcontract.methods.stake(_vaultId, tkIDs).send({ from: account });\n        }\n        else {\n          //console.log(\"stakeAny\");\n          await stakingnftcontract.methods.stakeAny(address, tkIDs).send({ from: account });\n        }\n        await refreshDAppView();\n      }\n      catch (ex) {\n        console.log(\"StakeThem - \" + ex);\n      }\n      await onGoingNotif(\"\");\n\n    }\n\n    async function refreshDAppView() {\n      await RefreshCollection();\n      await listNFTFilter(resultAPICall);\n      //await listStakeNFT('staked-nft-container');\n      await stakeVaults('staked-nft-container');\n    }\n\n    async function nftApproveAll(address) {\n      try {\n        var _nftcontract = await ABIFetch(web3, ABI.ERC721.ABI, address);\n        var _isAppr = await _nftcontract.methods.isApprovedForAll(account, stakingnft_address).call();\n        if (_isAppr == false) {\n          await _nftcontract.methods.setApprovalForAll(stakingnft_address, true).send({ from: account })\n        }\n        return true;\n      }\n      catch (ex) {\n        console.log(address);\n        console.log(\"nftApproveAll - \" + ex);\n        return false;\n      }\n\n    }\n\n    async function isWhitelist(address) {\n      var _res = false;\n      try {\n        for (var key in CONFIGWhitelist.NFT) {\n          if (CONFIGWhitelist.NFT[key].ADDRESS == address) {\n            _res = true;\n            break;\n          }\n        }\n      }\n      catch (ex) {\n        console.log(\"isWhitelist - \" + ex);\n      }\n\n      return _res;\n    }\n\n    async function ShowNFTError(msgValue) {\n      const DivContainer = document.getElementById('unstaked-nft-container');\n\n      const curDiv = document.createElement('div');\n      curDiv.className = \"nftcontainer mt-3 ml-3\";\n\n      const chk = document.createElement(\"INPUT\");\n      chk.setAttribute(\"type\", \"checkbox\");\n      chk.id = \"chk\"; // + contractAdress + \"_\" + tkID;\n      chk.class = \"unlisted\";\n\n      const lbl = document.createElement(\"LABEL\");\n      lbl.htmlFor = chk.id;\n\n      const objNFT = document.createElement('h6');\n      objNFT.innerHTML = msgValue;\n      objNFT.className = \"errorMessage\";\n\n      curDiv.appendChild(chk);\n      curDiv.appendChild(lbl);\n\n      curDiv.appendChild(objNFT);\n      DivContainer.appendChild(curDiv);\n    }\n\n    async function showCover() {\n      let coverDiv = document.createElement('div');\n      coverDiv.id = 'cover-div';\n\n      // make the page unscrollable while the modal form is open\n      document.body.style.overflowY = 'hidden';\n      document.body.append(coverDiv);\n    }\n\n    async function NitroAdd() {\n      await onGoingNotif(\"Pending...\");\n      try {\n        let DivContainer = document.getElementById('prompt-message');\n        var children = DivContainer.getElementsByTagName('*');\n        var child;\n\n        if (children.length > 0) {\n\n          var _isAppr = await nitrocontract.methods.isApprovedForAll(account, stakingnft_address).call();\n          if (_isAppr == false) {\n            await nitrocontract.methods.setApprovalForAll(stakingnft_address, true)\n              .send({\n                from: account,\n                gasLimit: String(totalGasLimit)\n              })\n          }\n\n          for (var i = 0; i < children.length; i++) {\n            child = children[i];\n            if (child.type == \"radio\" && child.checked == true) {\n              var nft = [];\n              nft = child.id.split(\"|\");\n\n              var _vaultId = nft[0];\n              var _tkID = nft[1];\n              var _nitroId = nft[2];\n\n              await stakingnftcontract.methods.stakeNitro(_vaultId, _tkID, _nitroId)\n                .send({\n                  from: account,\n                  gasLimit: String(totalGasLimit)\n                });\n              break;\n            }\n          }\n        }\n      }\n      catch (ex) {\n        console.log(ex);\n      }\n      await onGoingNotif(\"\");\n    }\n\n    async function hideCover() {\n      document.getElementById('cover-div').remove();\n      document.body.style.overflowY = '';\n    }\n\n    async function showPrompt(text, callback) {\n      showCover();\n      let form = document.getElementById('prompt-form');\n      let container = document.getElementById('prompt-form-container');\n      var curDiv = document.createElement('div');\n      var contractAdress = await nitrocontract.methods.symbol().call();\n\n      let DivContainer = document.getElementById('prompt-message');\n      DivContainer.innerHTML = \"\";\n\n      var balanceOfOwner = await nitrocontract.methods.balanceOf(account).call();\n      //console.log(\"balanceOfOwner: \" + balanceOfOwner);\n\n      for (let i = 0; i < balanceOfOwner; i++) {\n        (async function () {\n          try {\n            var tkID = await nitrocontract.methods.tokenOfOwnerByIndex(account, i).call();\n            //const tokenMetadata = await fetchNFTImage(nitrocontract, account, tkID, 'showPrompt');\n\n            curDiv = document.createElement('div');\n            curDiv.className = \"nitrocontainer mt-3\";\n\n            const chk = document.createElement(\"INPUT\");\n            chk.setAttribute(\"type\", \"radio\");\n            //vault | token | nitroID\n            chk.id = text + '|' + tkID;  //contractAdress + \"_\" + tkID;\n            chk.class = \"unlisted\";\n            chk.name = \"nitro\";\n\n            const lbl = document.createElement(\"LABEL\");\n            lbl.htmlFor = chk.id;\n\n            var imgNFT = document.createElement('img');\n            //imgNFT.setAttribute(\"src\", tokenMetadata[\"image\"]);\n            imgNFT.setAttribute(\"src\", \"./nitrocommon.gif\");\n            imgNFT.setAttribute(\"alt\", contractAdress);\n            imgNFT.style.width = \"100px\";\n\n            const div = document.createElement('div');\n            div.className = \"nftdetail\";\n\n            const objNFT = document.createElement('h6');\n            //objNFT.innerHTML = (nftName.length > 20 ? nftName.substring(1, 20) : nftName) + ` #` + (tkID.length > 5 ? tkID.substring(1, 5) : tkID);\n\n            curDiv.appendChild(chk);\n            curDiv.appendChild(lbl);\n            lbl.appendChild(imgNFT)\n            curDiv.appendChild(objNFT);\n            curDiv.appendChild(div);\n            div.appendChild(objNFT)\n\n            DivContainer.appendChild(curDiv);\n\n          }\n          catch (ex2) {\n            console.log(ex2);\n          }\n\n        })();\n      }\n\n      function complete(value) {\n        if (value == \"submit\") {\n          NitroAdd();\n        }\n        hideCover();\n        container.style.display = 'none';\n        document.onkeydown = null;\n        callback(value);\n      }\n\n      form.onsubmit = function () {\n        let value = \"submit\";\n        complete(value);\n        return false;\n      };\n\n      form.cancel.onclick = function () {\n        complete(null);\n      };\n\n      document.onkeydown = function (e) {\n        if (e.key == 'Escape') {\n          complete(null);\n        }\n      };\n      container.style.display = 'block';\n    }\n\n    async function NitroMint(pID) {\n      try {\n        await onGoingNotif(\"Pending...\");\n\n        if (amtNitro > 0) {\n\n          var totalCostWei = 0;\n          var totalCost = await nitrocontract.methods.getNFTCost(pID).call();\n          var _allow = await rewardcontract.methods.allowance(account, nitroboost_address).call();\n          var _maxSupp = await rewardcontract.methods.totalSupply().call();\n          totalCost = Web3.utils.fromWei(totalCost) * amtNitro;\n          //console.log(totalCost, _allow);\n          totalCostWei = Web3.utils.toWei(String(totalCost));\n\n          if (totalCostWei >= _allow) {\n            await onGoingNotif(\"Approval...\");\n            await rewardcontract.methods.approve(nitroboost_address, _maxSupp)\n              .send({ from: account });\n            await onGoingNotif(\"Pending...\");\n          }\n          await nitrocontract.methods\n            .mint(amtNitro, pID)\n            .send({\n              gasLimit: String(totalGasLimit * amtNitro),\n              to: nitroboost_address,\n              from: account\n            });\n        }\n      }\n      catch (ex) {\n        console.log(ex);\n      }\n      await onGoingNotif(\"\");\n    }\n\n    async function BtnSelected(amt) {\n      amtNitro = amt;\n    }\n\n    return (\n      <div className=\"App nftapp\">\n        <nav class=\"navbar navbarfont navbar-expand-md navbar-dark bg-dark mb-4\">\n          <div class=\"container-fluid\" style={{ fontFamily: \"SF Pro Display\" }}>\n            <a class=\"navbar-brand px-5\" style={{ fontWeight: \"800\", fontSize: '15px' }} href=\"#\"></a><img src=\"logo.png\" width=\"7%\" />\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n              <ul class=\"navbar-nav me-auto mb-2 px-3 mb-md-0\" style={{ fontSize: \"15px\" }}>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Dashboard</a>\n                </li>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\" href=\"#\">Market Place</a>\n                </li>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\">Bridge NFTs</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className='px-5'>\n            <div class=\"d-flex flex-row accountInfo\">\n              <div id=\"wallBal\" className=\"walletBalance\" />\n              <div id=\"btnConnect\" onClick={connectwallet} className=\"connectbutton ml-2\" type=\"button\" style={{ fontFamily: \"SF Pro Display\" }}>\n                Connect Your Wallet\n              </div>\n            </div>\n          </div>\n        </nav>\n\n        <div className='container container-style'>\n          <div className='col'>\n            <body className='nftminter'>\n              <form>\n                <div className='row p-2'>\n                  <h5 className='h5Nitro'>Mint Nitro NFT Here</h5>\n                </div>\n                <img src=\"./nitrocommon.gif\" width=\"100px\" />\n                <h6 className='h6Nitro'>Select Nitro Quantity</h6>\n\n                <ButtonGroup size=\"lg\"\n                  aria-label=\"First group\"\n                  name=\"amount\"\n                  style={{ boxShadow: \"1px 1px 5px #000000\" }}\n                  class=\"btn-group\"\n                >\n                  <Button value=\"1\" onClick={function () { BtnSelected(1) }}>1</Button>\n                  <Button value=\"2\" onClick={function () { BtnSelected(2) }}>2</Button>\n                  <Button value=\"3\" onClick={function () { BtnSelected(3) }}>3</Button>\n                  <Button value=\"4\" onClick={function () { BtnSelected(4) }}>4</Button>\n                  <Button value=\"5\" onClick={function () { BtnSelected(5) }}>5</Button>\n                </ButtonGroup>\n\n                <h6 className='h6Nitro mt-3'>Pay with your preferred Crypto</h6>\n                <div class=\"nitro-qty\" role=\"group\" id=\"btnNitroQty\" aria-label=\"Token Payment\">\n                  <button type=\"button\" class=\"btn btn-primary\" id=\"btnMartinB\" onClick={function () { NitroMint(0) }}>Crude Oil</button>\n                </div>\n              </form>\n            </body>\n\n          </div>\n          <div className='col'>\n            <table className='nftstaker'>\n              <tr>\n                <body className='nftstaker'>\n                  <form style={{ fontFamily: \"SF Pro Display\" }} >\n                    <Tabs defaultActiveKey=\"second\" className=\"nav-pills nav-fill\">\n                      <Tab eventKey=\"first\" title=\"Unstaked NFT\">\n                        <div className='row items' >\n                          <div class=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                            <div class=\"hold-nft-menu buttonmenu\" role=\"group\" aria-label=\"Hold NFT Menu\">\n                              <button type=\"button\" class=\"btn btn-secondary\" id=\"btnStakeSelected\" onClick={StakeThem}>Stake Selected</button>\n                              <button type=\"button\" class=\"btn btn-secondary\" id=\"btnStakeAll\" onClick={StakeAll}>Stake All</button>\n                              <select id=\"nftFilter\" className='drpFilter btn-secondary' onChange={RefreshCollection}>\n                                <option selected class=\"selected\">JeepneyRushNFT</option>\n                                <option>All Owned NFT</option>\n                              </select>\n                            </div>\n                          </div>\n                        </div>\n                        <div className='col'>\n                          <div className='row items'>\n                            <div id='unstaked-nft-container' className='nft_card_view' />\n                          </div>\n                        </div>\n                      </Tab>\n                      <Tab eventKey=\"second\" title=\"Staked NFT\">\n                        <div className='row items' >\n                          <div class=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                            <div class=\"hold-nft-menu buttonmenu\" id=\"btnUnstakeMenu\" role=\"group\" aria-label=\"Stake NFT Menu\">\n                              <button type=\"button\" class=\"btn btn-secondary\" id=\"btnBack\" onClick={BackToCollection}>Back</button>\n                              <button type=\"button\" class=\"btn btn-secondary\" id=\"btnClaimSelected\" onClick={ClaimSelected}>Claim Selected</button>\n                              <button type=\"button\" class=\"btn btn-secondary\" id=\"btnUnstakeSelected\" onClick={UnstakeSelected}>Unstake Selected</button>\n                            </div>\n                          </div>\n                        </div>\n                        <div className='row items'>\n                          {/* <div id='staked-nft-container' className='ml-3 mr-3' style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(3, 5fr)\", columnGap: \"20px\" }} /> */}\n                          <div id='staked-nft-container' className='ml-3 mr-3 nft_card_view' />\n                        </div>\n                      </Tab>\n                    </Tabs>\n                  </form>\n                </body>\n              </tr>\n            </table>\n\n          </div>\n        </div>\n\n        <div id=\"prompt-form-container\" className='nft_card_view'>\n          <form id=\"prompt-form\">\n            <div className='add-booster'>\n              <div id=\"prompt-message\" className='scroll'></div>\n              <input name=\"btnSubmit\" type=\"submit\" value=\"Equip\"></input>\n              <input name=\"cancel\" type=\"button\" value=\"Cancel\" />\n            </div>\n          </form>\n        </div>\n\n      </div>\n    );\n  };\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}